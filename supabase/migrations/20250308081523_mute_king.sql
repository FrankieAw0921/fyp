/*
  # Hospital Queue Management System Schema

  1. New Tables
    - `profiles`
      - `id` (uuid, primary key) - Links to auth.users
      - `full_name` (text)
      - `phone_number` (text)
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
    
    - `queue_tickets`
      - `id` (uuid, primary key)
      - `patient_id` (uuid, references profiles)
      - `department` (text)
      - `ticket_number` (integer)
      - `status` (text) - ['waiting', 'in_progress', 'completed', 'cancelled']
      - `created_at` (timestamp)
      - `updated_at` (timestamp)
      - `estimated_time` (timestamp)

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated users to:
      - Read and update their own profile
      - Create and read their own queue tickets
      - Read all queue tickets for display purposes
*/

-- Create profiles table
CREATE TABLE profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id),
    totp_secret text,
    full_name text,
    phone_number text,
    isAdmin boolean DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Create queue_tickets table
CREATE TABLE queue_tickets (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    patient_id uuid REFERENCES profiles(id) NOT NULL,
    department text NOT NULL,
    ticket_number serial NOT NULL GENERATED BY DEFAULT,
    priority integer NOT NULL,
    status integer DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now(),
    estimated_time timestamptz
);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE queue_tickets ENABLE ROW LEVEL SECURITY;

-- Profiles policies
CREATE POLICY "Users can create their own profile"
    ON profiles FOR INSERT
    WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can view their own profile"
    ON profiles FOR SELECT
    -- USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile"
    ON profiles FOR UPDATE
    USING (auth.uid() = id);

CREATE POLICY "Users can delete their own profile"
    ON profiles FOR DELETE
    USING (auth.uid() = id);

-- Queue tickets policies
CREATE POLICY "Users can create their own tickets"
    ON queue_tickets FOR INSERT
    WITH CHECK (auth.uid() = patient_id);

CREATE POLICY "Users can view all tickets"
    ON queue_tickets FOR SELECT
    USING (true);

CREATE POLICY "Users can update their own tickets"
    ON queue_tickets FOR UPDATE
    USING (auth.uid() = patient_id);

CREATE POLICY "Users can delete their own tickets"
    ON queue_tickets FOR DELETE
    USING (auth.uid() = patient_id);

-- Function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_profiles_updated_at
    BEFORE UPDATE ON profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_queue_tickets_updated_at
    BEFORE UPDATE ON queue_tickets
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();